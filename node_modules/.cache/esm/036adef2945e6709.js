"main";_945‍.x([["Player",()=>Player]]);let GameObject;_945‍.w("./GameObject.js",[["GameObject",["GameObject"],function(v){GameObject=v}]]);let FIELD_HEIGHT,FIELD_WIDTH,players,bullets;_945‍.w("./Game.js",[["FIELD_HEIGHT",["FIELD_HEIGHT"],function(v){FIELD_HEIGHT=v}],["FIELD_WIDTH",["FIELD_WIDTH"],function(v){FIELD_WIDTH=v}],["players",["players"],function(v){players=v}],["bullets",["bullets"],function(v){bullets=v}]]);let Bullet;_945‍.w("./Bullet.js",[["Bullet",["Bullet"],function(v){Bullet=v}]]);let io,db;_945‍.w("../server.js",[["io",["io"],function(v){io=v}],["db",["db"],function(v){db=v}]]);




       class Player extends _945‍.a("GameObject",GameObject) {
  constructor(obj = {}) {
    super(obj);
    this.socketId = obj.socketId;
    this.nickname = obj.nickname;
    this.pass = obj.pass;
    this.width = 80;
    this.height = 80;
    this.health = this.maxHealth = 10;
    this.bullets = {};
    this.point = 0;
    this.speed = 5;
    this.movement = {};

    do {
      this.x = Math.random() * (_945‍.a("FIELD_WIDTH",FIELD_WIDTH) - this.width);
      this.y = Math.random() * (_945‍.a("FIELD_HEIGHT",FIELD_HEIGHT) - this.height);
      this.angle = Math.random() * 2 * Math.PI;
    } while (this.intersectWalls());
  }
  save() {
    let p = _945‍.a("db",db).get('Players');
    _945‍.g.console.log(p);
    _945‍.g.console.log("saving player");
    let p1 = p.find({nickname:this.nickname,pass:this.pass});
    if (p1 !== undefined){
    p1.assign({
        //id: this.id,
        Ttl:Date.now(),
        x: this.x,
        y: this.y,
        width: this.width,
        height: this.height,
        angle: this.angle,
        speed: this.speed,
        rotationSpeed: this.rotationSpeed,
        //nickname: this.nickname,
        //pass: this.pass,
        maxHealth: this.maxHealth,
        point: this.point,
        Level: this.Level,
        Exp: this.Exp,
        Attack: this.Attack,
        Defense: this.Defense
      }).write();
    } else {
      p.push({
        id: this.id,
        Ttl:Date.now(),
        x: this.x,
        y: this.y,
        width: this.width,
        height: this.height,
        angle: this.angle,
        speed: this.speed,
        rotationSpeed: this.rotationSpeed,
        nickname: this.nickname,
        pass: this.pass,
        maxHealth: this.maxHealth,
        point: this.point,
        Level: this.Level,
        Exp: this.Exp,
        Attack: this.Attack,
        Defense: this.Defense}).write();
    }
    p.write();
    _945‍.g.console.log('done saving');
  }

  shoot() {
    if (Object.keys(this.bullets).length >= 3) {
      return;
    }
    const bullet = new (_945‍.a("Bullet",Bullet))({
      x: this.x + this.width / 2,
      y: this.y + this.height / 2,
      angle: this.angle,
      player: this
    });
    bullet.move(this.width / 2);
    this.bullets[bullet.id] = bullet;
    _945‍.a("bullets",bullets)[bullet.id] = bullet;
  }
  damage() {
    this.health--;
    if (this.health === 0) {
      this.save();
      this.remove();
    }
  }
  remove() {
    delete _945‍.a("players",players)[this.id];
    _945‍.a("io",io).to(this.socketId).emit("dead");
  }
  toJSON() {
    return Object.assign(super.toJSON(), {
      health: this.health,
      maxHealth: this.maxHealth,
      socketId: this.socketId,
      point: this.point,
      nickname: this.nickname
    });
  }
};_945‍.u(["Player"]);
