"main";_1eb‍.x([["promises",()=>promises],["dataPath",()=>dataPath],["fileKey",()=>fileKey],["getDbPath",()=>getDbPath],["register",()=>register],["signIn",()=>signIn],["getUserDb",()=>getUserDb],["readDataDirectory",()=>readDataDirectory],["getDbUserData",()=>getDbUserData],["writeDbFile",()=>writeDbFile],["savePlayer",()=>savePlayer],["copyToPlayer",()=>copyToPlayer],["validateUsernamePass",()=>validateUsernamePass]]);let path;_1eb‍.w("path",[["default",["path"],function(v){path=v}]]);let fs;_1eb‍.w("fs",[["default",["fs"],function(v){fs=v}]]);

       const promises = fs.promises;

       let dataPath = path.join(process.cwd(), "data");
       let fileKey = "4nk22tdINY";

       function getDbPath(user) {
  return path.join("./data", user + fileKey + ".json");
}

       let register = function(req, res) {};
       let signIn = function(req, res) {};

       async function getUserDb(user) {
  let x = getDbPath(user);
  _1eb‍.g.console.log(`Getting ${user} db: ` + x);
  return JSON.parse(await promises.readFile(getDbPath(user)));
}

       async function readDataDirectory() {
  return await promises.readdir("./data");
}

       function getDbUserData(user) {
  return promises.readFile(getDbPath(user));
}

       async function writeDbFile(user, obj) {
  try {
    await promises.writeFile(getDbPath(user), JSON.stringify(obj));
  } catch (error) {
    _1eb‍.g.console.log(error);
  } 
  _1eb‍.g.console.info("file created");
}
       async function savePlayer(player) {
  try {
    await promises.writeFile(getDbPath(player.nickname), JSON.stringify(player));
  } catch (error) {
    _1eb‍.g.console.log(error);
  } 
  _1eb‍.g.console.info("player saved");
}
       function copyToPlayer(player, data) {
    return Object.assign(player,data);
}

       function validateUsernamePass(player,username,pass){
    return (player.nickname === username && player.pass === pass);
}
