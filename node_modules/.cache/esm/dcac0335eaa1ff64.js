"main";_eaa‍.x([["promises",()=>promises],["dataPath",()=>dataPath],["fileKey",()=>fileKey],["dbFileNameByUsername",()=>dbFileNameByUsername],["getDbPath",()=>getDbPath],["singleDBpath",()=>singleDBpath],["register",()=>register],["signIn",()=>signIn],["fileExists",()=>fileExists],["getUserDb",()=>getUserDb],["getDbFile",()=>getDbFile],["readDataDirectory",()=>readDataDirectory],["getDbUserData",()=>getDbUserData],["writeDbFile",()=>writeDbFile],["savePlayer",()=>savePlayer],["copyToPlayer",()=>copyToPlayer],["validateUsernamePass",()=>validateUsernamePass]]);let path;_eaa‍.w("path",[["default",["path"],function(v){path=v}]]);let fs;_eaa‍.w("fs",[["default",["fs"],function(v){fs=v}]]);

       const promises = fs.promises;

       let dataPath = path.join(process.cwd(), "data");
       let fileKey = "4nk22tdINY";
       function dbFileNameByUsername(username){
return username + fileKey + ".json";
}
       function getDbPath(user) {
  return path.join("./data", user + fileKey + ".json");
}
       function singleDBpath(dbFile) {
  return path.join("./data", dbFile);
}
       let register = function(req, res) {};
       let signIn = function(req, res) {};
       let fileExists = function(filename){
  let exists = false;
  fs.stat(filename,(err,stat)=>{
    if (err == null){exists = true}else {
exists = false;
    }
  });
  return exists;
};
       async function getUserDb(user) {
  let x = getDbPath(user);
  _eaa‍.g.console.log(`Getting ${user} db: ` + x);
  return JSON.parse(await promises.readFile(getDbPath(user)));
}
       async function getDbFile(fileName) {
  return JSON.parse(await promises.readFile(singleDBpath(fileName)));
}
       async function readDataDirectory() {
  return await promises.readdir("./data");
}

       function getDbUserData(user) {
  return promises.readFile(getDbPath(user));
}

       async function writeDbFile(user, obj) {
  try {
    await promises.writeFile(getDbPath(user), JSON.stringify(obj));
  } catch (error) {
    _eaa‍.g.console.log(error);
  }
  _eaa‍.g.console.info("file created");
}
       async function savePlayer(player) {
  try {
    await promises.writeFile(
      getDbPath(player.nickname),
      JSON.stringify(player)
    );
  } catch (error) {
    _eaa‍.g.console.log(error);
  }
  _eaa‍.g.console.info("player saved");
}
       function copyToPlayer(player, data) {
  return Object.assign(player, data);
}

       function validateUsernamePass(player, username, pass) {
  return player.nickname === username && player.pass === pass;
}
