"main";"use strict";;_b38‍.x([["io",()=>io],["savePlayer",()=>savePlayer]]);let express;_b38‍.w("express",[["default",["express"],function(v){express=v}]]);let http;_b38‍.w("http",[["default",["http"],function(v){http=v}]]);let path;_b38‍.w("path",[["default",["path"],function(v){path=v}]]);let socketIO;_b38‍.w("socket.io",[["default",["socketIO"],function(v){socketIO=v}]]);let fs;_b38‍.w("fs",[["default",["fs"],function(v){fs=v}]]);let players,bullets,walls;_b38‍.w("./modules/Game.js",[["players",["players"],function(v){players=v}],["bullets",["bullets"],function(v){bullets=v}],["walls",["walls"],function(v){walls=v}]]);let Player;_b38‍.w("./modules/Player.js",[["Player",["Player"],function(v){Player=v}]]);let BotPlayer;_b38‍.w("./modules/BotPlayer.js",[["BotPlayer",["BotPlayer"],function(v){BotPlayer=v}]]);let runMain;_b38‍.w("module",[["runMain",["runMain"],function(v){runMain=v}]]);
_b38‍.g.console.log(process.version);




const app = _b38‍.a("express",express)();
const server = _b38‍.a("http",http).Server(app);
       const io = _b38‍.a("socketIO",socketIO)(server);;_b38‍.u(["io"]);

//const { promises } = fs;
const promises = _b38‍.a("fs",fs).promises; //require('fs').promises;

let dataPath = _b38‍.a("path",path).join(process.cwd(), "data");
let fileKey = "4nk22tdINY";

function getDbPath(user) {
  return _b38‍.a("path",path).join("./data", user + fileKey + ".json");
}

async function readDataDirectory() {
  return await promises.readdir("./data");
}

function getDbUserData(user) {
  return promises.readFile(getDbPath(user));
}
async function getUserDb(user) {
  
  let x = getDbPath(user);
  _b38‍.g.console.log(`Getting ${user} db: ` + x);
  return JSON.parse(await promises.readFile(getDbPath(user)));
}
async function userMatchesPass(username,pass){
  
}
getUserDb("abc").then(val=>_b38‍.g.console.log(val));

async function writeDbFile(user, obj) {
  try {
    await promises.writeFile(getDbPath(user), JSON.stringify(obj));
  } catch (error) {
    _b38‍.g.console.log(error);
  }
  _b38‍.g.console.info("file created");
}

writeDbFile("me", { a: 5 });







const bot = new (_b38‍.a("BotPlayer",BotPlayer))({ nickname: "bot" });

_b38‍.a("players",players)[bot.id] = bot;

       let savePlayer = function(player) {
  let jso = player.jso();
  let playerData = db
    .get("Players")
    .find({ nickname: player.nickname, pass: player.pass })
    .assign({
      id: player.id,
      Ttl: Date.now(),
      x: player.x,
      y: player.y,
      width: player.width,
      height: player.height,
      angle: player.angle,
      speed: player.speed,
      rotationSpeed: player.rotationSpeed,
      nickname: player.nickname,
      pass: player.pass,
      maxHealth: player.maxHealth,
      point: player.point,
      Level: player.Level,
      Exp: player.Exp,
      Attack: player.Attack,
      Defense: player.Defense
    })
    .write();
};;_b38‍.u(["savePlayer"]);
io.on("validate-user",(socket)=>{
  _b38‍.g.console.log("validate-user");
  _b38‍.g.console.log(socket);
});

io.on("connection", function(socket) {
  _b38‍.g.console.log("io.on connection");
  let player = null;

  socket.on("game-start", config => {
    _b38‍.g.console.log("socket on game-start");
    player = new (_b38‍.a("Player",Player))({
      socketId: socket.id,
      nickname: config.nickname,
      pass: config.password
    });

    let playerData = db
      .get("Players")
      .find({ nickname: player.nickname, pass: player.pass })
      .value();
    _b38‍.g.console.log(":::: " + playerData);
    if (playerData !== undefined) {
      playerData.id = player.id;
      player.x = playerData.x;
      player.y = playerData.y;
      player.width = playerData.width;
      player.height = playerData.height;
      player.angle = playerData.angle;
      player.speed = playerData.speed;
      player.rotationSpeed = playerData.rotationSpeed;
      player.nickname = playerData.nickname;
      player.pass = playerData.pass;
      player.maxHealth = playerData.maxHealth;
      player.point = playerData.point;
      player.Level = playerData.Level;
      player.Exp = playerData.Exp;
      player.Attack = playerData.Attack;
      player.Defense = playerData.Defense;
    }
    _b38‍.a("players",players)[player.id] = player;

    //players[player.id].save();
    db.get("Players")
      .push(_b38‍.a("players",players)[player.id].jso())
      .write();
  });
  socket.on("movement", function(movement) {
    if (!player || player.health === 0) {
      return;
    }
    player.movement = movement;
  });
  socket.on("shoot", function() {
    if (!player || player.health === 0) {
      return;
    }
    player.shoot();
  });
  socket.on("disconnect", () => {
    if (!player) {
      return;
    }
    _b38‍.a("players",players)[player.id].save();
    delete _b38‍.a("players",players)[player.id];
    player = null;
  });
});

setInterval(() => {
  Object.values(_b38‍.a("players",players)).forEach(player => {
    const movement = player.movement;
    if (movement.forward) {
      player.move(player.speed);
    }
    if (movement.back) {
      player.move(-player.speed);
    }
    if (movement.left) {
      player.angle -= player.rotationSpeed;
    }
    if (movement.right) {
      player.angle += player.rotationSpeed;
    }
  });
  Object.values(_b38‍.a("bullets",bullets)).forEach(bullet => {
    if (!bullet.move(bullet.speed)) {
      bullet.remove();
      return;
    }
    Object.values(_b38‍.a("players",players)).forEach(player => {
      if (bullet.intersect(player)) {
        if (player !== bullet.player) {
          player.damage();
          bullet.remove();
          bullet.player.point += 1;
        }
      }
    });
  });
  io.sockets.emit("state", _b38‍.a("players",players), _b38‍.a("bullets",bullets), _b38‍.a("walls",walls));
}, 1000 / 20);

app.use("/static", _b38‍.a("express",express).static(__dirname + "/static"));

app.get("/", (request, response) => {
  response.sendFile(_b38‍.a("path",path).join(__dirname, "/static/3d.html"));
});

const port = 3000;
server.listen(port, () => {
  _b38‍.g.console.log(`Starting server on port ${port}`);
});
