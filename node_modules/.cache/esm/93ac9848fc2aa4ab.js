"main";"use strict";;_fc2‍.x([["io",()=>io],["db",()=>db]]);let players,bullets,walls,FIELD_WIDTH,FIELD_HEIGHT;_fc2‍.w("./modules/Game.js",[["players",["players"],function(v){players=v}],["bullets",["bullets"],function(v){bullets=v}],["walls",["walls"],function(v){walls=v}],["FIELD_WIDTH",["FIELD_WIDTH"],function(v){FIELD_WIDTH=v}],["FIELD_HEIGHT",["FIELD_HEIGHT"],function(v){FIELD_HEIGHT=v}]]);let Player;_fc2‍.w("./modules/Player.js",[["Player",["Player"],function(v){Player=v}]]);let Wall;_fc2‍.w("./modules/Walls.js",[["Wall",["Wall"],function(v){Wall=v}]]);let BotPlayer;_fc2‍.w("./modules/BotPlayer.js",[["BotPlayer",["BotPlayer"],function(v){BotPlayer=v}]]);

const express = require("express");
const http = require("http");
const path = require("path");
const socketIO = require("socket.io");
const app = express();
const server = http.Server(app);
       const io = socketIO(server);;_fc2‍.u(["io"]);
const low = require("lowdb");
const FileSync = require("lowdb/adapters/FileSync");
const adapter = new FileSync("db.json");
       const db = low(adapter);;_fc2‍.u(["db"]);













const bot = new (_fc2‍.a("BotPlayer",BotPlayer))({ nickname: "bot" });

_fc2‍.a("players",players)[bot.id] = bot;

io.on("connection", function(socket) {
  _fc2‍.g.console.log("io.on connection");
  let player = null;
 
  socket.on("game-start", config => {
    _fc2‍.g.console.log("socket on game-start");
    player = new (_fc2‍.a("Player",Player))({
      socketId: socket.id,
      nickname: config.nickname,
      pass: config.password
    });
    
    let playerData = db.get('Players').find({nickname:player.nickname,pass:player.pass}).value();
    _fc2‍.g.console.log(":::: " + playerData);
    if (playerData !== undefined){
      playerData.id = player.id;
      player.x = playerData.x;
      player.y = playerData.y;
      player.width = playerData.width;
      player.height = playerData.height;
      player.angle = playerData.angle;
      player.speed = playerData.speed;
      player.rotationSpeed = playerData.rotationSpeed;
      player.nickname = playerData.nickname;
      player.pass = playerData.pass;
      player.maxHealth = playerData.maxHealth;
      player.point = playerData.point;
      player.Level = playerData.Level;
      player.Exp = playerData.Exp;
      player.Attack = playerData.Attack;
      player.Defense = playerData.Defense;
      
  
  }
    _fc2‍.a("players",players)[player.id] = player;
    
    _fc2‍.a("players",players)[player.id].save();
  });
  socket.on("movement", function(movement) {
    if (!player || player.health === 0) {
      return;
    }
    player.movement = movement;
  });
  socket.on("shoot", function() {
    if (!player || player.health === 0) {
      return;
    }
    player.shoot();
  });
  socket.on("disconnect", () => {
    if (!player) {
      return;
    }
    _fc2‍.a("players",players)[player.id].save();
    delete _fc2‍.a("players",players)[player.id];
    player = null;
  });
});

setInterval(() => {
  Object.values(_fc2‍.a("players",players)).forEach(player => {
    const movement = player.movement;
    if (movement.forward) {
      player.move(player.speed);
    }
    if (movement.back) {
      player.move(-player.speed);
    }
    if (movement.left) {
      player.angle -= player.rotationSpeed;
    }
    if (movement.right) {
      player.angle += player.rotationSpeed;
    }
  });
  Object.values(_fc2‍.a("bullets",bullets)).forEach(bullet => {
    if (!bullet.move(bullet.speed)) {
      bullet.remove();
      return;
    }
    Object.values(_fc2‍.a("players",players)).forEach(player => {
      if (bullet.intersect(player)) {
        if (player !== bullet.player) {
          player.damage();
          bullet.remove();
          bullet.player.point += 1;
        }
      }
    });
  });
  io.sockets.emit("state", _fc2‍.a("players",players), _fc2‍.a("bullets",bullets), _fc2‍.a("walls",walls));
}, 1000 / 20);

app.use("/static", express.static(__dirname + "/static"));

app.get("/", (request, response) => {
  response.sendFile(path.join(__dirname, "/static/3d.html"));
});

const port = 3000;
server.listen(port, () => {
  _fc2‍.g.console.log(`Starting server on port ${port}`);
  db.defaults({
    Players: [{
      id: 351609823,
      x: 502.5754930370992,
      y: 48.45093268783282,
      width: 80,
      height: 80,
      angle: 0.022366698064048222,
      speed: 5,
      rotationSpeed: 0.1,
      nickname: "ab",
      pass: "ba",
      maxHealth: 10,
      point: 0,
      Level:0,
      Exp:0,
      Attack:1,
      Defense:1
    }],
    settings: {}
  }).write();

//db.get('settings').push({a:5}).write();
db.set('settings.fun','not').write();

db.get('Players').find({nickname:'ab',pass:'ba'}).assign({width:500}).write();
});

let getUserByUserPass = function(username,pass){
return db.get('Players').find({nickname:username,pass:pass}).value();
};

let getUserTaken = function(username){
  return (db.get('Players').find({nickname:username}).value() !== undefined)
};

let getUserMatchesPass = function(username, pass){
    return (db.get('Players').find({nickname:username,pass:pass}).value() !== undefined);
};

